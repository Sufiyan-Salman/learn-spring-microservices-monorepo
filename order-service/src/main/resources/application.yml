spring:
  application:
    name: order-service
#  cloud:
  config:
    import: optional:configserver:http://localhost:8888
  security:
    oauth2:
      resource-server:
        jwt:
          issuer-uri: http://localhost:8555/realms/learn-microservices-realm
  cache:
    type: redis
#We dont usually need this, adding the client dependency is usually enough, but just to be save, we have added this
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka

logging:
  level:
    org.springframework.security: DEBUG

#resilience config
resilience4j:
  retry:
   instances:
     retry-sample:
       maxAttempts: 5
       waitDuration: 1s # this specifies, how long to wait before hitting the req again
       enableExponentialBackoff: true # the time between subseqquent retries increase exponentially so it would be like 1s -> 2s -> 4s ->8s
     inventory-service: #This defines a circuit breaker specifically for calls to the inventory-service made via Feign.
       max-attempts: 3 # If a call to the inventory-service fails, it will retry up to 3 times.
       wait-duration: 2s #There is a 2-second delay between retries. This prevents overwhelming the service immediately after a failure.

  circuitbreaker:
    instances:
      inventory-service: #This defines a circuit breaker specifically for calls to the inventory-service made via Feign.
        sliding-window-size: 10 #This means the circuit breaker monitors the last 10 calls to track success or failure.
        failure-rate-threshold: 50 #If more than 50% of the calls fail within the sliding window, the circuit breaker trips (opens).
        minimum-number-of-calls: 5 #The circuit breaker only evaluates errors after at least 5 calls. This avoids premature tripping due to isolated errors.
        wait-duration-in-open-state: 5s #After tripping, the circuit breaker waits for 5 seconds before allowing a limited number of test calls (half-open state). If successful, the circuit closes again.

  ratelimiter: #protecting the service from being overwhelmed by too many requests.
    instances:
      inventory-service:
        limit-for-period: 1 # This allows 1 requests within each refresh period.
        limit-refresh-period: 5s # Ratelimiter resets every 5 seconds

  bulkhead: #limits concurrent calls
    instances:
      inventory-service:
        max-concurrent-calls: 5 #A maximum of 5 concurrent calls to the inventory-service is allowed.
        max-wait-duration: 2s # If all slots are full, additional calls wait for up to 2 seconds before timing out.


#spring zipkin
management:
  tracing:
    sampling:
      probability: 1.0 # specifies the percentage of reqs we'd want to trace, as we are using it for learning purposes currently, I have set it up to 100%
    zipkin:
      enabled: true

#redisson config, a redis client
redisson:
  file: classpath:redisson-config.yml